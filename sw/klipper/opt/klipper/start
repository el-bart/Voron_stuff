#!/bin/bash
set -eu -o pipefail
app=$(basename "$0")
app_dir=$(dirname "$(readlink -e "$0")")
cd "$app_dir"

# generate HTTPS certs for server
(
  cert_dir="$app_dir/nginx/certs"
  mkdir -p  "$cert_dir"
  chmod 700 "$cert_dir"

  # generate DH params
  dh="$cert_dir/dhparam.pem"
  if ! [ -f "$dh" ]
  then
    echo "$app: Diffie-Hellman parameter file is not there - generating new one"
    echo "$app: this is a VERY CPU-intensive process! you may want to generate this on your PC and copy to $dh instead"
    rm -f "$dh.tmp"
    time openssl dhparam -out "$dh.tmp" 4096
    mv "$dh.tmp" "$dh"
  fi

  # generate cert+key pair
  for host in moonraker fluidd
  do
    key="$cert_dir/$host.key"
    crt="$cert_dir/$host.crt"
    [ -f "$key" ] && continue
    echo "$app: key+cert for host '$host' is missing - generating now"
    time openssl req \
      -x509 \
      -newkey "rsa:4096" \
      -keyout "$key.tmp" \
      -out "$crt.tmp" \
      -sha256 \
      -days 3650 \
      -nodes \
      -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=$host" \
      -addext "subjectAltName=DNS:$host-voron24,DNS:$host-voron24.hellbound"
    mv "$key.tmp" "$key"
    mv "$crt.tmp" "$crt"
  done
)

# configure API key, if it's not there yet
(
  set +x # just in case
  cfg="/opt/klipper/klipperscreen/data/config/klipperscreen.cfg"
  placeholder="MOONRAKER_API_KEY_PLACEHOLDER"
  if grep -q "$placeholder" "$cfg"
  then
    db="/opt/klipper/moonraker/data/data/database/moonraker-sql.db"
    query='SELECT password FROM authorized_users WHERE username="_API_KEY_USER_";'
    if ! [ -f "$db" ]
    then
      echo "$app: WARNING: moonraker was never before - API key is not there" >&2
      echo "$app: WARNING: proceeding anyway - key should be available after restart or manual key setup" >&2
      exit 0
    fi
    echo "$app: substituting moonraker's key placeholder with actual API key"
    key=$(sqlite3 "$db" "$query")
    sed -i "s#$placeholder#$key#" "$cfg"
  fi
)

# TODO: temporary workaround
if [ -z "${DISPLAY:-}" ]
then
  export DISPLAY=:0
fi

# make sure X11 is up
while ! xrandr
do
  echo "$app: waiting for X11 to be up and running..." >&2
  sleep 1
done

# start the system
exec docker-compose up --timeout 2 --build
